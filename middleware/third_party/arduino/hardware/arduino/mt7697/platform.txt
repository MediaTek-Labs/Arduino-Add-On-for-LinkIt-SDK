#
# Arduino LinkIt 76x7 Core and platform
#

name=MediaTek Linkit Series
version=1.0.0

# 1. MTK compile variables
# ---------------------

# 1.1 Indicate MTK compiler
# ---------------------
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/

# 1.2 Indicate extra include and lib (archive file)
# ---------------------
compiler.path.extra_inc="-I{build.system.path}/{build.board}/src/{build.chip_mt7697_inc}" "-I{build.system.path}/{build.board}/src/{build.chin_inc}" "-I{build.system.path}/{build.board}/src/{build.cmsis_mt7697_inc}" "-I{build.system.path}/{build.board}/src/{build.cmsis_inc}" "-I{build.system.path}/{build.board}/src/{build.rtos_inc}" "-I{build.system.path}/{build.board}/src/{build.kernel_service_inc}" "-I{build.system.path}/{build.board}/src/{build.rtos_cm4_inc}" "-I{build.system.path}/{build.board}/src/{build.lwip_inc}" "-I{build.system.path}/{build.board}/src/{build.lwip_ports_inc}" "-I{build.system.path}/{build.board}/src/{build.mbedtls_configs_inc}" "-I{build.system.path}/{build.board}/src/{build.mbedtls_inc}" "-I{build.system.path}/{build.board}/src/{build.httpclient_inc}" "-I{build.system.path}/{build.board}/src/{build.connsys_inc}" "-I{build.system.path}/{build.board}/src/{build.wifi_inc}" "-I{build.system.path}/{build.board}/src/{build.ble_inc}" "-I{build.system.path}/{build.board}/src/{build.prebuilt_ble_inc}" "-I{build.system.path}/{build.board}/src/{build.nvdm_inc}" "-I{build.system.path}/{build.board}/src/{build.dhcpd_inc}" 

compiler.path.extra_lib="{build.system.path}/{build.board}/libs/{build.lib_linkit}" "{build.system.path}/{build.board}/libs/{build.lib_hal_core_CM4_GCC}" "{build.system.path}/{build.board}/libs/{build.lib_nvdm_CM4_GCC}" "{build.system.path}/{build.board}/libs/{build.lib_hal_protected_CM4_GCC}" "{build.system.path}/{build.board}/libs/{build.lib_minicli_CM4_GCC}" "{build.system.path}/{build.board}/libs/{build.lib_wifi}" "{build.system.path}/{build.board}/libs/{build.lib_minisupp_wps}" "{build.system.path}/{build.board}/libs/{build.lib_ble}" "{build.system.path}/{build.board}/libs/{build.lib_ble_multi_adv}" "{build.system.path}/{build.board}/libs/{build.lib_btdriver_7697}"

# 1.2 Indicate some warning flags with each level
# ---------------------
compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=-Wno-unused-parameter
compiler.warning_flags.more=-Wall -Wno-unused-parameter
compiler.warning_flags.all=-Wall -Wno-double-promotion -Wextra -Werror=uninitialized -Wno-error=maybe-uninitialized -Werror=return-type  -Wno-error -Wno-switch -Wno-unused-parameter

# 1.3 Indicate compile flags: FPU flags, HAL flags and Common flags
# ---------------------
compiler.fpu_flags=-mlittle-endian -mthumb -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard
compiler.hal_flags=-DPRODUCT_VERSION=7697 -DMTK_BSPEXT_ENABLE -DUSE_HAL_DRIVER -DMTK_NVDM_ENABLE -DMTK_DEBUG_LEVEL_INFO -DMTK_DEBUG_LEVEL_WARNING -DMTK_DEBUG_LEVEL_ERROR -DMTK_LWIP_ENABLE -DMTK_MINISUPP_ENABLE -DMTK_WIFI_API_TEST_CLI_ENABLE -DMTK_WIFI_REPEATER_ENABLE -DMTK_WIFI_WPS_ENABLE -DMBEDTLS_CONFIG_FILE="config-mtk-websocket.h" -DSUPPORT_MBEDTLS -DMTK_MINISUPP_ENABLE -DMTK_WIFI_TGN_VERIFY_ENABLE
compiler.com_flags=-gdwarf-2 -Os {compiler.warning_flags} -fno-exceptions -ffunction-sections -fdata-sections -fno-builtin -fno-strict-aliasing -fno-common -DPCFG_OS=2 -D_REENT_SMALL

# 2 Define some variables for the following special pattern
# ---------------------

# 2.1 For the pattern compiling *.c files
# ---------------------
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-c {compiler.fpu_flags} {compiler.hal_flags} {compiler.com_flags} {compiler.path.extra_inc} -MMD  -Wimplicit-function-declaration
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags={compiler.fpu_flags} --specs=nano.specs -lnosys -nostartfiles -Wl,-wrap=malloc -Wl,-wrap=calloc -Wl,-wrap=realloc -Wl,-wrap=free -Wl,--check-sections -Wl,--gc-sections


# 2.2 For the pattern compiling *.S files
# ---------------------
compiler.S.flags=

# 2.3 For the pattern compiling *.cpp files
# ---------------------
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-c {compiler.fpu_flags} {compiler.hal_flags} {compiler.com_flags} {compiler.path.extra_inc} -fno-exceptions -MMD -Wno-literal-suffix -fno-rtti

# 2.4 For the pattern generating Archive files
# ---------------------
compiler.ar.cmd=arm-none-eabi-gcc-ar
compiler.ar.flags=rcs

# 2.5 For the pattern generating Binary files
# ---------------------
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.elf2hex.flags=-O binary

compiler.ldflags=
compiler.size.cmd=arm-none-eabi-size

# 3 Board Related Extra Compile Flag
# ------------------------
# This can be overriden in boards.txt
build.extra_flags=

# ------------------------
# These can be overridden in platform.local.txt
compiler.c.extra_flags=-std=gnu99
compiler.c.elf.extra_flags="-Wl,-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" "-Wl,-u" "-Wl,_printf_float"
compiler.S.extra_flags=
compiler.cpp.extra_flags=-std=c++11 -fno-rtti
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=


# 4 Implement all the patterns for each type files
# ---------------------

# 4.1 Pattern for compiling c files
# ------------------------
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {includes} {compiler.c.extra_flags} {build.extra_flags}  "{source_file}" -o "{object_file}"

# 4.2 Pattern for compiling c++ files
# ------------------------
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {includes} {compiler.cpp.extra_flags} {build.extra_flags} "{source_file}" -o "{object_file}"

# 4.3 Pattern for compiling S files
# ------------------------
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

# 4.4 Generate archive files
# ------------------------
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

# 4.5 Generate elf files
# ------------------------
# Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -mcpu={build.mcu} {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" -Wl,--start-group {object_files} "{build.path}/{archive_file}" {compiler.path.extra_lib} -Wl,--end-group "-L{build.path}" -lm -lstdc++

# 4.5 Generate binary files
# ------------------------
# Create output files (.bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

# 4.6 Compute size
# ------------------------
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data)\s+([0-9]+).*
# Refer to https://forum.labs.mediatek.com/zh/t/faq18632-ram-size/344
# note that we don't calculate TCM RAM usage here, as Arduino layer
# won't be accessing that part of memory.
recipe.size.regex.data=^(?:\.data|\.bss|\.heap|.\stack_dummy)\s+([0-9]+).*


# 5 Upload tools
# ------------------------
tools.flash_tool.path={runtime.tools.flash_tool.path}
tools.flash_tool.cmd=upload.py
tools.flash_tool.cmd.windows=upload.exe

tools.flash_tool.upload.params.verbose=
tools.flash_tool.upload.params.quiet=
tools.flash_tool.upload.params.verify=
tools.flash_tool.upload.pattern="{path}/{cmd}" -n "{path}/da97.bin" -c {serial.port} -f "{build.path}/{build.project_name}.bin"

# Bootloader update
tools.flash_tool.bootloader.cmd=upload.py
tools.flash_tool.bootloader.cmd.windows=upload.exe
tools.flash_tool.bootloader.params.verbose=-d
tools.flash_tool.bootloader.pattern="{path}/{cmd}" -n "{path}/da97.bin" -c {serial.port} -t ldr -f "{path}/mt7697_bootloader.bin"

# Dummy erase option just to make the menu work
tools.flash_tool.erase.params.verbose=-v
tools.flash_tool.erase.params.quiet=-q -q
tools.flash_tool.erase.pattern=
